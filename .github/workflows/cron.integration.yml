name: Daily Integration Tests

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  pull_request:
    branches:
      - main
    paths:
      - '.github/workflows/cron.integration.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      databend:
        image: datafuselabs/databend:nightly
        env:
          QUERY_DEFAULT_USER: databend
          QUERY_DEFAULT_PASSWORD: databend
          MINIO_ENABLED: true
        ports:
          - 8000:8000
          - 9000:9000
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Verify Service Running
        run: |
          sleep 30
          cid=$(docker ps -a | grep databend | cut -d' ' -f1)
          docker logs ${cid}
          curl -u databend:databend  --request POST localhost:8000/v1/query --header 'Content-Type:application/json' --data-raw '{"sql":"select 1"}'

      - name: Run Maven clean deploy with release profile
        run: mvn test -DexcludedGroups=cluster,FLAKY
        env:
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
  notify:
    if: failure()
    needs: [ test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Notify Dev Team
        uses: actions/github-script@v7
        env:
          WEBHOOK_URL: ${{ secrets.DEV_TEAM_WEBHOOK_URL }}
        with:
          script: |
            const body = {
              msg_type: 'text',
              content: {
                text: '⚠️ Databend JDBC Integration Tests Failed: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}',
              }
            }
            const response = await fetch(process.env.WEBHOOK_URL, {
              method: 'POST',
              body: JSON.stringify(body),
              headers: {'Content-Type': 'application/json'}
            });
            const result = await response.json();
            console.log(result);